{"version":3,"sources":["components/CommonWeatherBox/CommonWeatherBox.styles.js","components/Search/PlacesAutocompleteSearch.styles.js","store/autocomplete.slice/weatherForecast.slice.js","components/Search/PlacesAutocompleteSearch.js","components/WeatherCard/WeatherCard.js","components/CommonWeatherBox/CommonWeatherBox.js","App.js","store/root.reducer.js","store/autocomplete.slice/weatherForecast.sagas.js","store/store.js","index.js"],"names":["StyledCommonWeatherBox","styled","div","StyledSearch","input","weatherForecastSlice","createSlice","name","initialState","locationForecast","status","LatLng","reducers","getLatLngFromLibrary","state","action","payload","getForecastSuccess","getForecastError","console","log","actions","PlacesAutocompleteSearch","dispatch","useDispatch","usePlacesAutocomplete","requestOptions","debounce","ready","value","suggestions","data","setValue","clearSuggestions","ref","useOnclickOutside","handleSelect","description","getGeocode","address","then","results","getLatLng","lat","lng","catch","error","onChange","e","target","disabled","placeholder","map","suggestion","place_id","structured_formatting","main_text","secondary_text","onClick","WeatherCard","weatherData","useSelector","forecast","current","weather","icon","temp","src","alt","CommonWeatherBox","App","className","rootReducer","combineReducers","workFetchForecastByLanLng","autoCompleteSaga","call","axios","get","forecastData","put","takeEvery","saga","createSagaMiddleware","store","configureStore","reducer","middleware","run","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.f70c8a8c.chunk.js","sourcesContent":["import styled from \"styled-components\";\r\n\r\nexport const StyledCommonWeatherBox = styled.div`\r\n\r\n`;\r\n","import styled from \"styled-components\";\r\n\r\nexport const StyledSearch = styled.input`\r\n  width: 600px;\r\n  font-size: 25px;\r\n`;\r\n","import {createSlice} from \"@reduxjs/toolkit\";\r\n\r\n\r\nconst weatherForecastSlice = createSlice({\r\n        name: \"weatherForecast\",\r\n        initialState: {\r\n            locationForecast: {},\r\n            status: \"\",\r\n            LatLng: {},\r\n        },\r\n        reducers: {\r\n            getLatLngFromLibrary(state, action) {\r\n                state.LatLng = action.payload;\r\n                state.status = \"loading\";\r\n            },\r\n            getForecastSuccess(state, action) {\r\n                state.status = \"success\";\r\n                state.locationForecast = action.payload;\r\n            },\r\n            getForecastError(state, action) {\r\n                state.status = \"error\";\r\n                console.log(action.payload);\r\n            }\r\n\r\n        }\r\n    }\r\n)\r\n\r\nexport const {\r\n    getLatLngFromLibrary,\r\n    getForecastSuccess,\r\n    getForecastError\r\n} = weatherForecastSlice.actions;\r\nexport default weatherForecastSlice.reducer;\r\n","import {StyledSearch} from \"./PlacesAutocompleteSearch.styles\";\r\nimport usePlacesAutocomplete, {\r\n    getGeocode,\r\n    getLatLng,\r\n} from \"use-places-autocomplete\";\r\nimport useOnclickOutside from \"react-cool-onclickoutside\";\r\nimport {useDispatch} from \"react-redux\";\r\nimport {getLatLngFromLibrary} from \"../../store/autocomplete.slice/weatherForecast.slice\";\r\n\r\nexport const PlacesAutocompleteSearch = () => {\r\n    const dispatch = useDispatch();\r\n    const {\r\n        ready,\r\n        value,\r\n        suggestions: {status, data},\r\n        setValue,\r\n        clearSuggestions,\r\n    } = usePlacesAutocomplete({\r\n        requestOptions: {},\r\n        debounce: 300,\r\n    });\r\n    const ref = useOnclickOutside(() => {\r\n\r\n        clearSuggestions();\r\n    });\r\n\r\n    const handleInput = (e) => {\r\n\r\n        setValue(e.target.value);\r\n    };\r\n\r\n    const handleSelect =\r\n        ({description}) =>\r\n            () => {\r\n\r\n                setValue(description, false);\r\n                clearSuggestions();\r\n\r\n\r\n                getGeocode({address: description})\r\n                    .then((results) => getLatLng(results[0]))\r\n                    .then(({lat, lng}) => {\r\n                        console.log(\"📍 Coordinates: \", {lat, lng});\r\n                        console.log(lat);\r\n                        dispatch(getLatLngFromLibrary({lat, lng}));\r\n                    })\r\n                    .catch((error) => {\r\n                        console.log(\"😱 Error: \", error);\r\n                    });\r\n            };\r\n\r\n    const renderSuggestions = () =>\r\n        data.map((suggestion) => {\r\n            const {\r\n                place_id,\r\n                structured_formatting: {main_text, secondary_text},\r\n            } = suggestion;\r\n\r\n            return (\r\n                <li key={place_id} onClick={handleSelect(suggestion)}>\r\n                    <strong>{main_text}</strong> <small>{secondary_text}</small>\r\n                </li>\r\n            );\r\n        });\r\n\r\n    return (\r\n        <div ref={ref}>\r\n            <StyledSearch\r\n                value={value}\r\n                onChange={handleInput}\r\n                disabled={!ready}\r\n                placeholder=\"Введите место\"\r\n            />\r\n\r\n            {status === \"OK\" && <ul>{renderSuggestions()}</ul>}\r\n        </div>\r\n    );\r\n};\r\n","import {useSelector} from \"react-redux\";\r\nimport React from \"react\";\r\n\r\nexport const WeatherCard = () => {\r\n    const weatherData = useSelector((state) => state.forecast);\r\n    console.log(weatherData.status);\r\n\r\n\r\n    if (weatherData.status === 'success') {\r\n        console.log(weatherData.locationForecast.current.weather[0].icon);\r\n        return (<div>\r\n            <span>Температура:{weatherData.locationForecast.current.temp}°С</span>\r\n            <img\r\n                src={`http://openweathermap.org/img/wn/${weatherData.locationForecast.current.weather[0].icon}@2x.png`}\r\n                alt=\"weatherImage\"\r\n            />\r\n\r\n        </div>)\r\n    } else {\r\n        return null\r\n    }\r\n}\r\n","import {StyledCommonWeatherBox} from \"./CommonWeatherBox.styles\";\r\nimport {PlacesAutocompleteSearch} from \"../Search/PlacesAutocompleteSearch\";\r\nimport {WeatherCard} from \"../WeatherCard/WeatherCard\";\r\n\r\nexport const CommonWeatherBox = () => {\r\n\r\n\r\n    return (\r\n        <StyledCommonWeatherBox>\r\n            <PlacesAutocompleteSearch/>\r\n            <WeatherCard/>\r\n        </StyledCommonWeatherBox>\r\n\r\n    )\r\n}\r\n","import React from 'react';\n\nimport {CommonWeatherBox} from \"./components/CommonWeatherBox/CommonWeatherBox\";\n\n\nfunction App() {\n    return (\n        (\n            <div className=\"App\">\n                <CommonWeatherBox/>\n            </div>\n        )\n    )\n}\n\nexport default App;\n","import {combineReducers} from \"@reduxjs/toolkit\";\r\nimport weatherForecastSlice from \"./autocomplete.slice/weatherForecast.slice\";\r\n\r\n\r\nexport const rootReducer = combineReducers({\r\n    forecast: weatherForecastSlice,\r\n})\r\n","import {call, put, takeEvery} from 'redux-saga/effects'\r\nimport axios from \"axios\";\r\nimport {\r\n    getLatLngFromLibrary,\r\n    getForecastError,\r\n    getForecastSuccess\r\n} from \"./weatherForecast.slice\";\r\n\r\nfunction* workFetchForecastByLanLng(action) {\r\n    try {\r\n        const forecastData = yield call(() => axios.get(`https://api.openweathermap.org/data/2.5/onecall?lat=${action.payload.lat}&lon=${action.payload.lng}&exclude={part}&units=metric&appid=68ed3e5f8b3f2f49f60d8fb52e794c62`));\r\n        console.log(forecastData.data);\r\n        yield put(getForecastSuccess(forecastData.data));\r\n    } catch (error) {\r\n        yield put(getForecastError(error));\r\n    }\r\n}\r\n\r\nfunction* autoCompleteSaga() {\r\n    yield takeEvery(getLatLngFromLibrary, workFetchForecastByLanLng);\r\n}\r\n\r\nexport default autoCompleteSaga;\r\n\r\n\r\n","import {configureStore} from '@reduxjs/toolkit';\nimport {rootReducer} from \"./root.reducer\";\nimport autoCompleteSaga from \"./autocomplete.slice/weatherForecast.sagas\";\nimport createSagaMiddleware from 'redux-saga';\n\nconst saga = createSagaMiddleware();\nexport const store = configureStore({\n    reducer: rootReducer,\n    middleware: [saga],\n});\n\nsaga.run(autoCompleteSaga);\n\n\n\n\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport {Provider} from 'react-redux';\nimport {store} from \"./store/store\";\n\n\nReactDOM.render(\n    <React.StrictMode>\n        <Provider store={store}>\n            <App/>\n        </Provider>\n    </React.StrictMode>,\n    document.getElementById('root')\n);\n\n\n"],"sourceRoot":""}